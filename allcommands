|| Generated by DP - don't edit anything outside |{...|}

|{ Header
CALL GUI_MAIN.INITIALIZE
PROGRAM
. if (meminfo('GUI_CUSTOM.INITIALIZE:T',1) = 1) execute dbms 'call GUI_CUSTOM.INITIALIZE' | customization
END PROGRAM

RETRIEVAL UPDATE NOAUTOCASE |program crwarn
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 IAGREE                          ; preset IAGREE                           (1 )
integer*1 IDISAGREE                       ; preset IDISAGREE                        (2 )
integer*1 DBTITLE                         ; preset DBTITLE                          (3 )
integer*1 DBFOOTER                        ; preset DBFOOTER                         (4 )
integer*1 CASESEARCH                      ; preset CASESEARCH                       (5 )
integer*1 CASELIST                        ; preset CASELIST                         (6 )
integer*1 CASENEW                         ; preset CASENEW                          (7 )
integer*1 CASETEXT                        ; preset CASETEXT                         (8 )
integer*1 CASESEARCHLABEL                 ; preset CASESEARCHLABEL                  (9 )
integer*1 CASELISTLABEL                   ; preset CASELISTLABEL                    (10 )
integer*1 CASENEWLABEL                    ; preset CASENEWLABEL                     (11 )
integer*1 CASESEARCHBOX                   ; preset CASESEARCHBOX                    (12 )
integer*1 CASENEWBOX                      ; preset CASENEWBOX                       (13 )
integer*1 CASELISTBOX                     ; preset CASELISTBOX                      (14 )
integer*1 CASEBREADCRUMB                  ; preset CASEBREADCRUMB                   (15 )
integer*1 TIMELABEL                       ; preset TIMELABEL                        (16 )
integer*1 GUIVERSION                      ; preset GUIVERSION                       (17 )
integer*1 DBAPAGE                         ; preset DBAPAGE                          (18 )
integer*1 CASENEWB                        ; preset CASENEWB                         (19 )
integer*1 FORMLIST                        ; preset FORMLIST                         (20 )
integer*1 FORMINFO                        ; preset FORMINFO                         (21 )
integer*1 RECBREADCRUMB                   ; preset RECBREADCRUMB                    (22 )
integer*1 OPTIONS                         ; preset OPTIONS                          (23 )
integer*1 PAGETABLE                       ; preset PAGETABLE                        (24 )
integer*1 PAGEHOME                        ; preset PAGEHOME                         (25 )
integer*1 PAGENEWKEYS                     ; preset PAGENEWKEYS                      (26 )
integer*1 PAGEDBA                         ; preset PAGEDBA                          (27 )
integer*1 LOGOUT                          ; preset LOGOUT                           (28 )
integer*1 OLDKEYLABEL1                    ; preset OLDKEYLABEL1                     (29 )
integer*1 OLDKEYLIST1                     ; preset OLDKEYLIST1                      (30 )
integer*1 OLDKEYLABEL2                    ; preset OLDKEYLABEL2                     (31 )
integer*1 OLDKEYLIST2                     ; preset OLDKEYLIST2                      (32 )
integer*1 OLDKEYLABEL3                    ; preset OLDKEYLABEL3                     (33 )
integer*1 OLDKEYLIST3                     ; preset OLDKEYLIST3                      (34 )
integer*1 OLDKEYLABEL4                    ; preset OLDKEYLABEL4                     (35 )
integer*1 OLDKEYLIST4                     ; preset OLDKEYLIST4                      (36 )
integer*1 NEWKEYLABEL1                    ; preset NEWKEYLABEL1                     (37 )
integer*1 NEWKEYCHOICE1                   ; preset NEWKEYCHOICE1                    (38 )
integer*1 NEWKEYLABEL2                    ; preset NEWKEYLABEL2                     (39 )
integer*1 NEWKEYCHOICE2                   ; preset NEWKEYCHOICE2                    (40 )
integer*1 NEWKEYLABEL3                    ; preset NEWKEYLABEL3                     (41 )
integer*1 NEWKEYCHOICE3                   ; preset NEWKEYCHOICE3                    (42 )
integer*1 NEWKEYLABEL4                    ; preset NEWKEYLABEL4                     (43 )
integer*1 NEWKEYCHOICE4                   ; preset NEWKEYCHOICE4                    (44 )
integer*1 NEWKEYVARMAP1                   ; preset NEWKEYVARMAP1                    (45 )
integer*1 NEWKEYVARMAP2                   ; preset NEWKEYVARMAP2                    (46 )
integer*1 NEWKEYVARMAP3                   ; preset NEWKEYVARMAP3                    (47 )
integer*1 NEWKEYVARMAP4                   ; preset NEWKEYVARMAP4                    (48 )
integer*1 NEWKEYVALUE1                    ; preset NEWKEYVALUE1                     (49 )
integer*1 NEWKEYVALUE2                    ; preset NEWKEYVALUE2                     (50 )
integer*1 NEWKEYVALUE3                    ; preset NEWKEYVALUE3                     (51 )
integer*1 NEWKEYVALUE4                    ; preset NEWKEYVALUE4                     (52 )
integer*1 USERNAME                        ; preset USERNAME                         (53 )
integer*1 DBANAME                         ; preset DBANAME                          (54 )
integer*1 DIALOGBORDER                    ; preset DIALOGBORDER                     (55 )
integer*1 RECSELECTLABEL                  ; preset RECSELECTLABEL                   (56 )
integer*1 DEFAULTBUTTON                   ; preset DEFAULTBUTTON                    (57 )
integer*1 RECNAMESELECTED                 ; preset RECNAMESELECTED                  (58 )
integer*1 CASEBREADCRUMBOX                ; preset CASEBREADCRUMBOX                 (59 )
integer*1 CASESEARCHB                     ; preset CASESEARCHB                      (60 )
integer*1 NEWRECHELP                      ; preset NEWRECHELP                       (61 )
integer*1 ID_00009                        ; preset ID_00009                         (62 )
integer*1 NEWRECBUTTON                    ; preset NEWRECBUTTON                     (63 )
integer*1 NEWRECCANCEL                    ; preset NEWRECCANCEL                     (64 )
integer*1 PAGECASEDELETE                  ; preset PAGECASEDELETE                   (65 )
integer*1 DEBUGCODE                       ; preset DEBUGCODE                        (66 )
integer*1 SPLASHBOTTOM                    ; preset SPLASHBOTTOM                     (67 )
integer*1 ID_00011                        ; preset ID_00011                         (68 )
integer*1 ID_00013                        ; preset ID_00013                         (69 )
integer*1 RECBREADCRUMBOX                 ; preset RECBREADCRUMBOX                  (70 )
integer*1 SPLASHTOP                       ; preset SPLASHTOP                        (71 )
integer*1 RECTABLEDATA                    ; preset RECTABLEDATA                     (72 )
integer*1 TABLEKEYLABEL1                  ; preset TABLEKEYLABEL1                   (73 )
integer*1 TABLEKEYLABEL2                  ; preset TABLEKEYLABEL2                   (74 )
integer*1 TABLEKEYLABEL3                  ; preset TABLEKEYLABEL3                   (75 )
integer*1 TABLEKEYLABEL4                  ; preset TABLEKEYLABEL4                   (76 )
integer*1 DELETECASELABEL                 ; preset DELETECASELABEL                  (77 )
integer*1 CASEDELETEINFO                  ; preset CASEDELETEINFO                   (78 )
integer*1 CASEDELETEREASON                ; preset CASEDELETEREASON                 (79 )
integer*1 CASEDELETEBUTTON                ; preset CASEDELETEBUTTON                 (80 )
integer*1 ID_00017                        ; preset ID_00017                         (81 )
integer*1 CASEDELETEWARNING               ; preset CASEDELETEWARNING                (82 )
integer*1 CASERECWARNING                  ; preset CASERECWARNING                   (83 )
integer*1 OLDRECCOUNTERLABLE              ; preset OLDRECCOUNTERLABLE               (84 )
integer*1 OLDRECCOUNTER                   ; preset OLDRECCOUNTER                    (85 )
integer*1 TABLEVIEWSPREADSHEET            ; preset TABLEVIEWSPREADSHEET             (86 )
integer*1 ID_00019                        ; preset ID_00019                         (87 )
integer*1 DELETECASEBACK                  ; preset DELETECASEBACK                   (88 )
integer*1 ID_00020                        ; preset ID_00020                         (89 )
integer*1 ID_00021                        ; preset ID_00021                         (90 )
integer*1 TABLEVIEWHELP                   ; preset TABLEVIEWHELP                    (91 )
integer*1 LOCKSTATUSLABEL                 ; preset LOCKSTATUSLABEL                  (92 )
integer*1 ID_00022                        ; preset ID_00022                         (93 )
integer*1 m_page; preset m_page (1)

|{ Prologue
|}

dialog "List View Title"

|{ Controls
postype 1
button   IAGREE                          , 258,       86, 124, 0, "Continue"
button   IDISAGREE                       , 258,      266, 124, 0, "Exit"
text     DBTITLE                         ,   0,  18,   0, 488, 1
text     DBFOOTER                        , 369,  21,   0, 488, 0
edit     CASESEARCH                      ,  60,       33, 145, 0, 0
list     CASELIST                        ,  51, 244, 305, 164, 0
edit     CASENEW                         , 146,       33, 145, 0, 0
text     CASETEXT                        ,  69,  32,  23, 247, 0
label    CASESEARCHLABEL                 ,  41,       15, 272, "Case Search Label"
label    CASELISTLABEL                   ,  41,      305, 164, "Case List Label"
label    CASENEWLABEL                    , 127,       15, 272, "Case New Label"
line     CASESEARCHBOX                   ,  41,  52,  14, 274
line     CASENEWBOX                      , 127,  52,  14, 274
line     CASELISTBOX                     ,  41,  10, 305, 164
label    CASEBREADCRUMB                  ,  32,       13, 252, "  Breadcrum Case"
label    TIMELABEL                       , 356,        5,  88, "10 minutes until time out."
label    GUIVERSION                      , 356,      445,  40, "Version 1.2"
label    DBAPAGE                         ,  41,       60, 133, "DBA Only Page"
button   CASENEWB                        , 146,      182,  83, 0, "Create"
list     FORMLIST                        , 102, 148,  23, 247, 0
text     FORMINFO                        , 253,  68,  23, 247, 0
label    RECBREADCRUMB                   ,  33,      277, 204, "  Breadcrum Rec"
button   OPTIONS                         ,  19,      402,  41, 0, "Options"
button   PAGETABLE                       ,  45,      416,  55, 0, "Table"
button   PAGEHOME                        ,  19,      345,  55, 0, "Home"
button   PAGENEWKEYS                     ,  45,      360,  55, 0, "New Form"
button   PAGEDBA                         ,  19,      303,  41, 0, "DBA"
button   LOGOUT                          ,  19,      444,  44, 0, "Log Out"
label    OLDKEYLABEL1                    ,  59,      305, 171, " KEY1L"
list     OLDKEYLIST1                     ,  69,  68, 305, 171, 0
label    OLDKEYLABEL2                    , 140,      305, 171, " KEY2L"
list     OLDKEYLIST2                     , 150,  68, 305, 171, 0
label    OLDKEYLABEL3                    , 222,      305, 171, " KEY3L"
list     OLDKEYLIST3                     , 232,  61, 305, 171, 0
label    OLDKEYLABEL4                    , 300,      305, 171, " KEY4L"
list     OLDKEYLIST4                     , 310,  44, 305, 171, 0
label    NEWKEYLABEL1                    , 100,       74, 289, " KEY1L"
choice   NEWKEYCHOICE1                   , 113,      191, 157
label    NEWKEYLABEL2                    , 159,       74, 289, " KEY2L"
choice   NEWKEYCHOICE2                   , 171,      191, 157
label    NEWKEYLABEL3                    , 219,       74, 289, " KEY3L"
choice   NEWKEYCHOICE3                   , 232,      191, 157
label    NEWKEYLABEL4                    , 279,       74, 289, " KEY4L"
choice   NEWKEYCHOICE4                   , 292,      191, 157
label    NEWKEYVARMAP1                   , 128,      107, 256, "New Key Help 1"
label    NEWKEYVARMAP2                   , 186,      107, 256, "New Key Help 2"
label    NEWKEYVARMAP3                   , 247,      107, 256, "New Key Help 3"
label    NEWKEYVARMAP4                   , 307,      107, 256, "New Key Help 4"
edit     NEWKEYVALUE1                    , 113,       95,  91, 0, 0
edit     NEWKEYVALUE2                    , 171,       95,  91, 0, 0
edit     NEWKEYVALUE3                    , 232,       95,  91, 0, 0
edit     NEWKEYVALUE4                    , 292,       95,  91, 0, 0
label    USERNAME                        , 356,      344,  89, "USERNAME"
label    DBANAME                         , 356,      139, 184, "DBANAME"
line     DIALOGBORDER                    ,   0, 390,   0, 488
label    RECSELECTLABEL                  , 108,       73,  64, "  RECSELECTLABEL"
button   DEFAULTBUTTON                   ,  38,      208,  64, 1, "Default Button"
list     RECNAMESELECTED                 , 117, 183,  72,  91, 0
line     CASEBREADCRUMBOX                ,  32,  27,  12, 254
button   CASESEARCHB                     ,  60,      182,  83, 0, "Search"
label    NEWRECHELP                      ,  71,       32, 356, "    Create a new record."
line     ID_00009                        ,  71, 277,  32, 356
button   NEWRECBUTTON                    ,  55,      277,  75, 0, "Create"
button   NEWRECCANCEL                    ,  55,      372,  75, 0, "Back"
button   PAGECASEDELETE                  ,  45,      157,  96, 0, "Delete Case"
edit     DEBUGCODE                       , 354,       26, 239, 0, 0
text     SPLASHBOTTOM                    ,  76, 147,  53, 371, 0
line     ID_00011                        , 238,   1, 135, 200
line     ID_00013                        ,  69, 272, 282,   1
line     RECBREADCRUMBOX                 ,  32,  27, 276, 206
text     SPLASHTOP                       ,  40,  30,  53, 371, 0
list     RECTABLEDATA                    ,  83, 164,  32, 428, 0
label    TABLEKEYLABEL1                  ,  74,       44, 100, "Table Key Label 1"
label    TABLEKEYLABEL2                  ,  74,      147, 100, "Table Key Label 1"
label    TABLEKEYLABEL3                  ,  74,      250, 100, "Table Key Label 3"
label    TABLEKEYLABEL4                  ,  74,      353, 124, "Table Key Label 4"
label    DELETECASELABEL                 ,  70,       25, 292, "Delete Case Label"
text     CASEDELETEINFO                  ,  83, 212,  32, 428, 0
edit     CASEDELETEREASON                , 325,       44, 332, 0, 0
button   CASEDELETEBUTTON                , 325,      393,  53, 0, "Delete"
line     ID_00017                        , 296,  68,  33, 428
label    CASEDELETEWARNING               , 305,       44, 220, "Please provide a reason for the deletion."
label    CASERECWARNING                  , 342,      120, 256, "This will delete X records too!"
label    OLDRECCOUNTERLABLE              , 108,      181,  64, "Old Rec Counter"
label    OLDRECCOUNTER                   , 108,      246,  76, "Old Rec Count #"
button   TABLEVIEWSPREADSHEET            ,  55,      277,  75, 0, "View All Data"
button   ID_00019                        ,  55,      372,  75, 0, "Back"
button   DELETECASEBACK                  ,  67,      372,  75, 0, "Back"
button   ID_00020                        ,  70,       75, 112, 0, "Lock DB"
button   ID_00021                        ,  85,       75, 112, 0, "Unlock DB"
label    TABLEVIEWHELP                   , 251,       39, 232, "* Only displays key data."
label    LOCKSTATUSLABEL                 , 335,       16, 136, "DATABASE  IS  LOCKED"
button   ID_00022                        ,  45,      300,  55, 0, "View Form"
|}

initial
|{ Attribs
|< CASESEARCH
. SET ITEM FONT CASESEARCH,0,0,0, 1,""
. SET ITEM FONT CASESEARCH,0,0,0, 1,""
|>
|< CASELIST
. SET ITEM FONT CASELIST,0,0,0, 1,""
. SET ITEM FONT CASELIST,0,0,0, 1,""
|>
|< CASENEW
. SET ITEM FONT CASENEW,0,0,0, 1,""
. SET ITEM FONT CASENEW,0,0,0, 1,""
|>
|< CASESEARCHLABEL
. SET ITEM FONT CASESEARCHLABEL,1,0,0, 1,"/#FFEA83"
. SET ITEM FONT CASESEARCHLABEL,1,0,0, 1,"/#FFEA83"
|>
|< CASELISTLABEL
. SET ITEM FONT CASELISTLABEL,1,0,0, 1,"/#FFEA83"
. SET ITEM FONT CASELISTLABEL,1,0,0, 1,"/#FFEA83"
|>
|< CASENEWLABEL
. SET ITEM FONT CASENEWLABEL,1,0,0, 1,"/#C1EBFF"
. SET ITEM FONT CASENEWLABEL,1,0,0, 1,"/#C1EBFF"
|>
|< CASEBREADCRUMB
. SET ITEM FONT CASEBREADCRUMB,1,0,0, 1,"#000000/#FFEA83"
. SET ITEM FONT CASEBREADCRUMB,1,0,0, 1,"#000000/#FFEA83"
. SET ITEM FONT CASEBREADCRUMB,1,0,0, 1,"#000000/#FFEA83"
|>
|< CASENEWB
. SET ITEM FONT CASENEWB,0,0,0, 1,""
. SET ITEM FONT CASENEWB,0,0,0, 1,""
|>
|< RECBREADCRUMB
. SET ITEM FONT RECBREADCRUMB,1,0,0, 1,"#000000/#BDE7FB"
. SET ITEM FONT RECBREADCRUMB,1,0,0, 1,"#000000/#BDE7FB"
|>
|< PAGETABLE
. SET ITEM FONT PAGETABLE,1,0,0, 0,""
|>
|< PAGENEWKEYS
. SET ITEM FONT PAGENEWKEYS,1,0,0, 0,""
|>
|< OLDKEYLABEL1
. SET ITEM FONT OLDKEYLABEL1,1,0,0, 1,""
|>
|< OLDKEYLABEL2
. SET ITEM FONT OLDKEYLABEL2,1,0,0, 1,""
|>
|< OLDKEYLABEL3
. SET ITEM FONT OLDKEYLABEL3,1,0,0, 1,""
|>
|< OLDKEYLABEL4
. SET ITEM FONT OLDKEYLABEL4,1,0,0, 1,""
|>
|< NEWKEYLABEL1
. SET ITEM FONT NEWKEYLABEL1,1,0,0, 1,"#000000"
|>
|< NEWKEYLABEL2
. SET ITEM FONT NEWKEYLABEL2,1,0,0, 1,"#000000"
|>
|< NEWKEYLABEL3
. SET ITEM FONT NEWKEYLABEL3,1,0,0, 1,"#000000"
|>
|< NEWKEYLABEL4
. SET ITEM FONT NEWKEYLABEL4,1,0,0, 1,"#000000"
|>
|< CASESEARCHB
. SET ITEM FONT CASESEARCHB,0,0,0, 1,""
. SET ITEM FONT CASESEARCHB,0,0,0, 1,""
|>
|< NEWRECHELP
. SET ITEM FONT NEWRECHELP,1,1,0, 1,"/#BDE7FB"
. SET ITEM FONT NEWRECHELP,1,1,0, 1,"/#BDE7FB"
. SET ITEM FONT NEWRECHELP,1,1,0, 1,"/#BDE7FB"
. SET ITEM FONT NEWRECHELP,1,1,0, 1,"/#BDE7FB"
|>
|< NEWRECBUTTON
. SET ITEM FONT NEWRECBUTTON,1,0,0, 1,""
|>
|< NEWRECCANCEL
. SET ITEM FONT NEWRECCANCEL,1,0,0, 1,""
|>
|< RECTABLEDATA
. SET ITEM FONT RECTABLEDATA,0,0,0, 0,"lucida console"
|>
|< TABLEKEYLABEL1
. SET ITEM FONT TABLEKEYLABEL1,1,0,0, 0,""
|>
|< TABLEKEYLABEL2
. SET ITEM FONT TABLEKEYLABEL2,1,0,0, 0,""
|>
|< TABLEKEYLABEL3
. SET ITEM FONT TABLEKEYLABEL3,1,0,0, 0,""
|>
|< TABLEKEYLABEL4
. SET ITEM FONT TABLEKEYLABEL4,1,0,0, 0,""
|>
|< DELETECASELABEL
. SET ITEM FONT DELETECASELABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETECASELABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETECASELABEL,1,0,0, 1,"#FF0000"
. SET ITEM FONT DELETECASELABEL,1,0,0, 1,"#FF0000"
|>
|< CASEDELETEWARNING
. SET ITEM FONT CASEDELETEWARNING,1,0,0, 1,"#FF0000"
. SET ITEM FONT CASEDELETEWARNING,1,0,0, 1,"#FF0000"
. SET ITEM FONT CASEDELETEWARNING,1,0,0, 1,"#FF0000"
|>
|< CASERECWARNING
. SET ITEM FONT CASERECWARNING,0,0,0, 1,"#FF0000"
|>
|< TABLEVIEWSPREADSHEET
. SET ITEM FONT TABLEVIEWSPREADSHEET,1,0,0, 1,""
|>
|< ID_00019
. SET ITEM FONT ID_00019,1,0,0, 1,""
|>
|< DELETECASEBACK
. SET ITEM FONT DELETECASEBACK,1,0,0, 1,""
|>
|< ID_00020
. SET ITEM FONT ID_00020,1,0,0, 0,""
|>
|< ID_00021
. SET ITEM FONT ID_00021,1,0,0, 0,""
|>
|< TABLEVIEWHELP
. SET ITEM FONT TABLEVIEWHELP,1,0,0, 1,""
|>
|< LOCKSTATUSLABEL
. SET ITEM FONT LOCKSTATUSLABEL,1,0,0, 1,"#FFC000"
. SET ITEM FONT LOCKSTATUSLABEL,1,0,0, 1,"#FFC000"
|>
|< ID_00022
. SET ITEM FONT ID_00022,1,0,0, 0,""
|>

|}
|{ Init
<comment> write "initialize DCC vars"
. string  *    600   GENSTR1             | Generic/General String
. integer *      1   CASETYPE             | What variable type is the case id
. string  *     32   CASENAME             | Variable name of case, varname(0, 1)
. string  *     72   CASELABEL            | Variable label of case, vavarname(0, 1)
. string  *     32   CASETEMPVALUE        | Case Test Value
. string  *     32   CASEVALUE            | Case Value
. integer *      1   CASEFOUND            | Does the case exists.
. string  *     32   BUFFERNAME           | Buffer Name
. string  *    300   BUFFERLINE           | Text to add to buffer
. integer *      4   BUFF#                | Current line number to write in buffer
. integer *      1   YES NO
. integer *      1   MEM_O MEM_T          | No need to remember compile or text value.
| Look and feel
. integer *      1   BOLD N_BOLD
                     ITALIC N_ITALIC
                     UNDERL N_UNDERL      | Fonts specifications
. integer *      1   SMALL LARGE XLARGE   | Fonts Size specifications
. string  *     20   NPFONT               | Font type for lists
. string  *     20   P_FONT               | Font type for lables
. integer *      4   CYCLENUM             | Cycle through some numbers
| Auto Log Out
. integer *      1   TIMELEFT             | Minutes until Auto Log Out
. time               COUNTDOWN ('HH:MM:SS')
. integer *      1   PROCEED              | Control Flow Varialbe.  Yes/No
. integer *      2   RESVAR               | Response Variable
. integer *      2   POS
. integer *      2   REPOS                | REPOSitition the list to what was selected before.
. integer *      4   DUMMY                | Dummy Variable
. integer *      2   RECTYPENUM           | RECORD NUMBER
. integer *      2   RECROWCOUNT          | How many rows of records are there
. integer *      2   array RECINFONUM     (200)  | Rec Number
. string  *     32   array RECINFONAME    (200)  | Rec name
. string  *    200   array RECINFODISPLAY (200)  | Rec Display
. integer *      2   FORMCNT              | Space out the forms
. integer *      2   KEYCOUNT             | key count
. string  *     32   KEYNAME1   KEYNAME2   KEYNAME3   KEYNAME4
. string  *     32   KEYVALUE1  KEYVALUE2  KEYVALUE3  KEYVALUE4 KEYVALUE5  KEYVALUE6  KEYVALUE7
. integer *      1   KEYTYPE1   KEYTYPE2   KEYTYPE3   KEYTYPE4  KEYTYPE5   KEYTYPE6  KEYTYPE7
. string  *     72   KEYLABEL1  KEYLABEL2  KEYLABEL3  KEYLABEL4
. string  *     32   KEY$N     KEY$V      | generic key name; key value (can be key1, key2, key3, or key4.
. integer *      1   KEY$T                | generic key type
. string  *    100   VTYPEMAP             | generic Variable Type Map
. real    *      8   KEYMIN KEYMAX        | generic Key Min and Max Values
. integer *      4   KEYLABELCOUNT        | generic How many labels are associated with the variable
. integer *      4   VALIDCOUNT           | generic How many valid values are there
. integer *      1   VALVAR               | validation variable
. string  *     80   RECVIA               | Passing Keys with VIA to subprocedures.
. date               DATE#V ('MMiDDiYYYY')| Right format for a Date Key
. time               TIME#V ('HHiMMiSS')  | Right format for a Time Key
. integer *      2   KEYFOCUS
. integer *      1   VIEWSPLASH VIEWHOME VIEWOLDKEYS VIEWNEWKEYS VIEWTABLE VIEWDBA |  Which Page View, easily rearrange pages
. string  *    300   HIPPATEXT1 HIPPATEXT2
. string  *    300   SPLASHTEXT1 SPLASHTEXT2
. string  *     32   SCREENNAME           | Start of Screen Name
. string  *     32   SCREENMEMBER         | Name for PQL Painter Screen
. string  *     32   DVPMEMBER            | Name for DVPainter Screen
. integer *      1   EXIT__#              | How did they exit the screen?
. integer *      4   DEBUGLINE
. integer *      2   FORMLISTLASTLINE     | Last line that the user clicked.  Reloading the keys is a problem for the user.  Do NOT reload if user is clicking on same form again.
. integer *      1 IGUIRECNEW IGUIRECREAD IGUIRECWRITE IGUIRECDELETE IGUIRECLOCK
                   IGUICASENEW IGUICASEDELETE IGUICASELOCK
                   IGUISPECIAL IGUIREPORTS  IGUIDBA   | customizable variables for the gui.
. INTEGER *      1   DBLOCKSTATUS | 1 =
. DEBUGLINE = 1
. value labels KEY$T (1) 'String' (2) 'Categorical' (3) 'Date' (4) 'Time' (5) 'Number' (6) 'Number' (7) 'Number' (8) 'Scaled Var.  See Codebook.'
. value label VALVAR (0) 'valid' (1) 'not valid' (2) 'out of range' (3) 'blank or missing' (4) 'missing (code:1)' (5) 'missing (code:2)' (6) 'missing  (code:3)' (7) 'too long'
. value label DBLOCKSTATUS (-1) 'Unknown. No access to file' (0) 'Unlocked' (1) 'Locked'
. enable timer 600
<comment> write "static DCC vars"
. set NO (0)    YES (1)
. set MEM_T (1) MEM_O (4)
. set VIEWSPLASH (1) VIEWHOME (2) VIEWOLDKEYS(3) VIEWNEWKEYS(4) VIEWTABLE (5) VIEWCASEDELETE (6)  VIEWDBA (7)
. HIPPATEXT1 = ' The information contained in this database is confidential. All database use is logged and monitored.'
. HIPPATEXT2 = ' Unauthorized or improper use of this system, or the information it contains, is prohibited.'
. SPLASHTEXT1 = 'WELCOME!'
. SPLASHTEXT2 = ' The information contained in this database is confidential. All database use is logged and monitored.'
                + '<BR> <BR> Unauthorized or improper use of this system, or the information it contains, is prohibited.'
. CASENAME  = trimr(varname(0, 1))
. CASETYPE  = vtype(0,CASENAME)
. CASELABEL = varlabsc(0,CASENAME)
<comment> write "Calculate dynamic DCC vars"
. set TIMELEFT (10)
. COUNTDOWN = now(0)
<comment> write "Look and Feel"
. set N_BOLD N_ITALIC N_UNDERL (0)
. set BOLD ITALIC UNDERL SMALL (1)
. set SMALL (1) LARGE (3) XLARGE (5)
. set NPFONT ('lucida console')
. set P_FONT ('arial')
. set item CASELISTLABEL, '  ' + CASELABEL
. set item DBANAME, 'Designed and Managed by Greg Neils.'
. GENSTR1 = '<body bgcolor="#7C4A1C" readonly="true"><font color="#FFFFFF" size="+3"><p align="center">'
. append line SPLASHTOP, GENSTR1 + SPLASHTEXT1 html
. GENSTR1 = '<body bgcolor="#AFFE77" readonly="true"><font color="#111111" size="+2">'
. append line SPLASHBOTTOM, GENSTR1 + '<br> <br>   ' + SPLASHTEXT2 html
. GENSTR1 = '<body bgcolor="#336AF3" readonly="true"><font color="#FFFFFF" size="+3">'
. append line DBTITLE, GENSTR1 html
. ifthen (system(40) lt 1)
.   write "A Database should be attached"
.   set dialog title "No DB. Created by the DCC"
.   set item DBTITLE "  No Database"
. else
.   set dialog title dbname(0) + " Created by the DCC"
.   ifthen (len(recdoc(0,0)) gt 0)
.     GENSTR1 = GENSTR1 + recdoc(0,0)
.   else
.     GENSTR1 = GENSTR1 + dbname(0)
.   endif
.   GENSTR1 = '  ' + GENSTR1  + '  Designed by the DCC.'
.   append line DBTITLE, GENSTR1 html
.   set item CASESEARCHLABEL, '  Search for ' + CASELABEL
.   set item CASENEWLABEL, '  New ' + CASELABEL
. endif
. ifthen (exists(sglobal('USERA')) eq 1) set item USERNAME, sglobal('USERA')
. else set item USERNAME, GETENV('USERNAME')
. endif
. execute subprocedure PERMISSIONSDEFAULT
. execute subprocedure DBLOCKSTATUS
C if no cases in database option to create first case.
. GENSTR1 = '<body bgcolor="#CCCCCC"  readonly="true">'
. append line DBFOOTER, GENSTR1 html
. set item DBFOOTER, HIPPATEXT1 + CHAR(13) + HIPPATEXT2
. call GUI_MAIN.CASEFIRST
. ifthen (system(40) gt 0)    | database attached
|   case information
.   execute subprocedure CASELISTLOAD |execute dbms 'CALL GUI_MAIN.RUNRETRIEVAL'
.   select item CASELIST, 0
.   set item CASEBREADCRUMB, ''
|   form information
.   execute subprocedure RECLISTLOAD
.   execute subprocedure OLDKEYREDLABEL
.   clear all FORMLIST
. endif
<DEBUGMODE> write ' if search for case returns zero results, should not be able to click on forms or new keys.  must figure this out'
. ifthen (sglobal('DEBUGMODE') EQ '.')
.   BUFFERNAME = 'DEBUGINFO'
.   execute subprocedure BUFFERSTART
. else
.   hide item DEBUGCODE
. endif
. focus item IAGREE
|}
execute subprocedure page
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
. TIMELEFT = 10
. if (sglobal('DEBUGSEND') EQ '.') execute subprocedure DEBUGINFO;  DEBUGLINE = DEBUGLINE +1
C SYSTEMERRORCHECK SHOULD GO HERE  | MOVE TO TIMER TO NOT GET TO MANY MESSAGES
<comment> write '-------------------- Message  --------------------' //
|}

ifthen (m_id eq IAGREE )
|< IAGREE
| This must be the last thing drawn so it recieves focus
. if (m_page = VIEWHOME) NEXT MESSAGE  | alreadY on page
. m_page = VIEWHOME
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure ITEMENABLE

|>
next message
endif

ifthen (m_id eq IDISAGREE )
|< IDISAGREE
Exit Message
|>
next message
endif

ifthen (m_id eq CASELIST )
|< CASELIST
. PROCEED = YES
. CASETEMPVALUE = trimlr(upper(gettxt(CASELIST)))
. CASEVALUE = trimlr(upper(gettxt(CASELIST)))
<comment> write '- Clicked CaseList CASEVALUE:' CASEVALUE
<DEBUGMODE> write 'case display is not really refreshing with the correct case information'
. ifthen (M_ARG2 eq 1)
.   execute subprocedure OLDKEYPAGEDISPLAYLIB
.   execute subprocedure ITEMVISIBLE
. endif
|>
next message
endif

ifthen (m_id eq CASENEWB )
|< CASENEWB
. execute subprocedure CASENEWLIB
|>
next message
endif

ifthen (m_id eq FORMLIST )
|< FORMLIST
. ifthen ( FORMLISTLASTLINE = getpos(FORMLIST) )
.   ifthen (M_ARG2 eq 1)  | DOUBLE CLICK
.     ifthen (RECROWCOUNT EQ 1)  | JUST ONE RECORD.  GET THE VALUES AND GO TO IT.
.       execute subprocedure ALLKEYGETVALUE
.       execute subprocedure OLDKEYALLVALIDATE
.       if ( PROCEED = NO ) NEXT MESSAGE
.       execute subprocedure GOTOSCREENLIB  | double clicked - go to screen and do everything needed afterwards
.       next message
.     elseif (RECROWCOUNT GT 1)
.       GENSTR1 = 'Answer the questions to the right.'
                   + char(13) + char(13) + 'Then double click on the last key to go to the form.'
                   + char(13) + char(13) + 'You can click on New Form above to create a new form.'
.       display infobox GENSTR1
.       next message
.     elseif (RECROWCOUNT EQ 0)
.       display YNCBOX 'Create a new form?' RESPONSE RESVAR
.       if (RESVAR EQ 0 or -1 ); next message  | no or cancel (1=Yes)
.       ifthen (KEYCOUNT EQ 0)
.         execute subprocedure GOTOSCREENLIB  | double clicked - go to screen
.       else
.         m_page = VIEWNEWKEYS
.         execute subprocedure PAGE
.         execute subprocedure ITEMVISIBLE
.         execute subprocedure NEWKEYVISIBLE
.         focus item NEWKEYVALUE1
.       endif
.     endif
.   endif
. else
.   FORMLISTLASTLINE = getpos(FORMLIST)
.   execute subprocedure RECDISPLAY
.   execute subprocedure RECGETINFO
.   execute subprocedure ALLKEYINIDISPLAY
.   execute subprocedure OLDKEYVISIBLE
.   execute subprocedure OLDKEYMAKEVIA
.   execute subprocedure OLDKEYREFRESH
.   execute subprocedure OLDRECCOUNT
.   execute subprocedure ITEMENABLE
. endif



|>
next message
endif

ifthen (m_id eq OPTIONS )
|< OPTIONS
execute dbms "call GUI_MAIN.OPTIONS"
|>
next message
endif

ifthen (m_id eq PAGETABLE )
|< PAGETABLE
. if (m_page eq VIEWTABLE) NEXT MESSAGE  | already on page
. if (getpos(CASELIST) eq 0) display infobox "Please select a " + CASELABEL; NEXT MESSAGE
. if (getpos(FORMLIST) eq 0) display infobox "Please select a form"; NEXT MESSAGE

. m_page = VIEWTABLE
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure RECTABLEDISPLAY
|>
next message
endif

ifthen (m_id eq PAGEHOME )
|< PAGEHOME
. if (m_page = VIEWHOME) NEXT MESSAGE  | alreadY on page
. m_page = VIEWHOME
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure ITEMENABLE
|>
next message
endif

ifthen (m_id eq PAGENEWKEYS )
|< PAGENEWKEYS
. if (m_page eq VIEWNEWKEYS) NEXT MESSAGE  | already on page
. if (getpos(CASELIST) eq 0) display infobox "Please select a " + CASELABEL; NEXT MESSAGE
. ifthen (getpos(FORMLIST) eq 0)
.   execute subprocedure OLDKEYPAGEDISPLAYLIB
.   execute subprocedure ITEMVISIBLE
.   display infobox "Please select a form." ; NEXT MESSAGE
. endif
. m_page = VIEWNEWKEYS
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure NEWKEYVISIBLE
. focus item NEWKEYVALUE1
|>
next message
endif

ifthen (m_id eq PAGEDBA )
|< PAGEDBA
. if (m_page eq VIEWDBA) NEXT MESSAGE  | alread on page
. m_page = VIEWDBA
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE

|>
next message
endif

ifthen (m_id eq LOGOUT )
|< LOGOUT
Exit Message
|>
next message
endif

ifthen (m_id eq OLDKEYLIST1 )
|< OLDKEYLIST1
. PROCEED = 1
. KEY$N = KEYNAME1; KEY$T = KEYTYPE1; KEY$V = gettxt(OLDKEYLIST1)
. execute subprocedure ANYKEYCLEAN
. execute subprocedure ANYKEYVALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEYLABEL1 + '". ' + char(13) + char(13) + KEY$V  + ' was not valid.'
.   next message
. endif
. KEYVALUE1 = KEY$V

. ifthen (KEYCOUNT EQ 1)
.   ifthen (M_ARG2 eq 1)
.     execute subprocedure GOTOSCREENLIB  | double clicked - go to screen
.     next message
.   endif
. endif
. execute subprocedure OLDKEYMAKEVIA
. execute subprocedure OLDKEYREFRESH
. execute subprocedure OLDKEYDESELECTNEXT
. execute subprocedure OLDKEYREDLABEL

|>
next message
endif

ifthen (m_id eq OLDKEYLIST2 )
|< OLDKEYLIST2
. PROCEED = 1
. KEY$N = KEYNAME1; KEY$T = KEYTYPE1; KEY$V = gettxt(OLDKEYLIST1)
. execute subprocedure ANYKEYCLEAN
. execute subprocedure ANYKEYVALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEYLABEL1 + '". ' + char(13) + char(13) + KEY$V  + ' was not valid.'
.   next message
. endif
. execute subprocedure OLDKEYCLICKLIB

|>
next message
endif

ifthen (m_id eq OLDKEYLIST3 )
|< OLDKEYLIST3
. PROCEED = 1
. KEY$N = KEYNAME1; KEY$T = KEYTYPE1; KEY$V = gettxt(OLDKEYLIST1)
. execute subprocedure ANYKEYCLEAN
. execute subprocedure ANYKEYVALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEYLABEL1 + '". ' + char(13) + char(13) + KEY$V  + ' was not valid.'
.   next message
. endif
. execute subprocedure OLDKEYCLICKLIB

|>
next message
endif

ifthen (m_id eq OLDKEYLIST4 )
|< OLDKEYLIST4
. PROCEED = 1
. KEY$N = KEYNAME1; KEY$T = KEYTYPE1; KEY$V = gettxt(OLDKEYLIST1)
. execute subprocedure ANYKEYCLEAN
. execute subprocedure ANYKEYVALIDATE
. ifthen (PROCEED eq 0)
.   display infobox '  Value for "' + KEYLABEL1 + '". ' + char(13) + char(13) + KEY$V  + ' was not valid.'
.   next message
. endif
. execute subprocedure OLDKEYCLICKLIB

|>
next message
endif

ifthen (m_id eq NEWKEYCHOICE1 )
|< NEWKEYCHOICE1
. KEY$N = KEYNAME1
. KEY$V = trim(gettxt(NEWKEYCHOICE1))
. KEY$T = KEYTYPE1
. execute subprocedure ANYKEYCLEAN
. set item NEWKEYVALUE1, KEY$V
|>
next message
endif

ifthen (m_id eq NEWKEYCHOICE2 )
|< NEWKEYCHOICE2
. KEY$N = KEYNAME2
. KEY$V = trim(gettxt(NEWKEYCHOICE2))
. KEY$T = KEYTYPE2
. execute subprocedure ANYKEYCLEAN
. set item NEWKEYVALUE2, KEY$V
|>
next message
endif

ifthen (m_id eq NEWKEYCHOICE3 )
|< NEWKEYCHOICE3
. KEY$N = KEYNAME3
. KEY$V = trim(gettxt(NEWKEYCHOICE3))
. KEY$T = KEYTYPE3
. execute subprocedure ANYKEYCLEAN
. set item NEWKEYVALUE3, KEY$V
|>
next message
endif

ifthen (m_id eq NEWKEYCHOICE4 )
|< NEWKEYCHOICE4
. KEY$N = KEYNAME4
. KEY$V = trim(gettxt(NEWKEYCHOICE4))
. KEY$T = KEYTYPE4
. execute subprocedure ANYKEYCLEAN
. set item NEWKEYVALUE4, KEY$V
|>
next message
endif

ifthen (m_id eq DEFAULTBUTTON )
|< DEFAULTBUTTON
c <comment> write 'default button focus: ' [getfocus(0)] ' Value: ' [gettxt(getfocus(0))]
. ifthen (getfocus(0) eq CASESEARCH)
.   execute subprocedure OLDCASESEARCHLIB
. elseif (getfocus(0) eq CASENEW)
.   execute subprocedure CASENEWLIB
. elseif (getfocus(0) eq DEBUGCODE)
.   BUFFERNAME = 'DEBUGCODE'          ; execute subprocedure BUFFERSTART
.   BUFFERLINE = 'program'            ; execute subprocedure BUFFERWRITE
.   BUFFERLINE = gettxt(DEBUGCODE)    ; execute subprocedure BUFFERWRITE
.   BUFFERLINE = 'end program'        ; execute subprocedure BUFFERWRITE
.   execute dbms ['INCLUDE BUFFER ' + BUFFERNAME]
. endif
| note the reverse order. If you go in key order, you'll cycle through the keys, get to the last one and then focus on the create button all the time
. do repeat REPX = 4 3 2 1 /
            REPY = 4 4 3 2 /
.   ifthen (getfocus(0) eq NEWKEYVALUE!REPX)
.     KEY$N = KEYNAME!REPX
.     KEY$T = KEYTYPE!REPX
.     KEY$V = trimlr(gettxt(NEWKEYVALUE!REPX))
.     execute subprocedure ANYKEYVALIDATE
.     ifthen (PROCEED eq 0)
.       GENSTR1 = gettxt(NEWKEYLABEL!REPX)
                   + char(13) +  'Cannot be "' + KEY$V +'"'
                   + char(13) + char(9) + vallab(VALVAR)
.       display infobox GENSTR1
.       next message
.     endif
<debugmode> write 'this needs to be rethought.  When going back and selecting the new record keys, when should that happen?'
.     for FORN = 1, getnitems(NEWKEYCHOICE!REPX)
.       GENSTR$1 = trimlr(getitxt(NEWKEYCHOICE!REPX, FORN))
.       GENSTR$1 = trimlr(substr(GENSTR$1,1,len(GENSTR$1) - abs(srst(GENSTR$1,char(9))) ))  | trim before tab
.       GENSTR$1 = trimlr(SUBSTR(GENSTR$1,1,len(GENSTR$1) - abs(srst(GENSTR$1,' ')) ))      | trim before space
.       if (KEY$V = GENSTR$1 ) select item NEWKEYCHOICE!REPX, FORN ; EXIT FOR
.     end for
.     ifthen (KEYCOUNT eq REPX ) focus item NEWRECBUTTON
.     else focus item NEWKEYVALUE!REPY
.     endif
.   endif
. end repeat

|>
next message
endif

ifthen (m_id eq RECNAMESELECTED )
|< RECNAMESELECTED
. execute subprocedure RECDISPLAY
|>
next message
endif

ifthen (m_id eq CASESEARCHB )
|< CASESEARCHB
execute subprocedure OLDCASESEARCHLIB
|>
next message
endif

ifthen (m_id eq NEWRECBUTTON )
|< NEWRECBUTTON
. execute subprocedure ALLKEYGETVALUE
. do repeat REPX = 1 2 3 4/
.   KEY$N = KEYNAME!REPX
.   KEY$T = KEYTYPE!REPX
.   KEY$V = trimlr(gettxt(NEWKEYVALUE!REPX))
.   if (KEYCOUNT ge REPX) execute subprocedure ANYKEYVALIDATE  | ONLY DO IF KEYS REALLY EXIST FOR RECORD TYPE.
.   ifthen (PROCEED eq 0)
.     GENSTR1 = gettxt(NEWKEYLABEL!REPX)
                 + char(13) + char(13) + 'Cannot be "' + KEY$V +'"'
                 + char(13) + 'Problem: ' + vallab(VALVAR)
.     display infobox GENSTR1
.     focus item NEWKEYVALUE!REPX
.     set item NEWKEYVALUE!REPX, gettxt(NEWKEYVALUE!REPX)
.     next message
.   endif
. end repeat
. if(PROCEED = 0) next message
. execute subprocedure GOTOSCREENLIB

| on return goto VIEWOLDKEYS
. m_page = VIEWOLDKEYS
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure OLDKEYVISIBLE
. ifthen (KEYCOUNT ge 1)
|   select the new keys, nice from a user experience
.   focus item FORMLIST
.   execute subprocedure OLDKEYMAKEVIA
.   execute subprocedure OLDKEYREFRESH
.   KEY$N = KEYNAME1
.   for FORN = 1, getnitems(OLDKEYLIST1)
.     KEY$V = getitxt(OLDKEYLIST1, FORN)
.     execute subprocedure ANYKEYCLEAN
.     if (KEY$V = KEYVALUE1) select item OLDKEYLIST1, FORN ; EXIT FOR
.   end for
. endif
|>
next message
endif

ifthen (m_id eq NEWRECCANCEL )
|< NEWRECCANCEL
. m_page = VIEWOLDKEYS
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure OLDKEYVISIBLE
|>
next message
endif

ifthen (m_id eq PAGECASEDELETE )
|< PAGECASEDELETE
. if (m_page = VIEWCASEDELETE) NEXT MESSAGE  | already on page
. m_page = VIEWCASEDELETE
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure CASEALLDATADISPLAY
|>
next message
endif

ifthen (m_id eq CASEDELETEBUTTON )
|< CASEDELETEBUTTON
. display yncbox 'Delete ' + CASELABEL + ': ' + CASEVALUE RESPONSE RESVAR
. if (RESVAR EQ 0 or -1 ); next message  | no or cancel (1=Yes)
. if ( gettxt(CASEDELETEREASON) EQ '') display infobox 'Please provide a reason.'; next message
. if ( len(PACK(gettxt(CASEDELETEREASON))) LE 5) display infobox 'A more detailed reason, please'; next message
. execute subprocedure CASEDELETE
. execute subprocedure CASELISTLOAD
. m_page = VIEWHOME
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure ITEMENABLE
. select item CASELIST, 0

|>
next message
endif

ifthen (m_id eq TABLEVIEWSPREADSHEET )
|< TABLEVIEWSPREADSHEET
. GENSTR1 = "SIR SPREADSHEET RECTYPE=" + format(RECTYPENUM)
             + " BOOLEAN = (trimr(" + CASENAME + ") = "
. ifthen (CASETYPE = 1 and sbst(CASEVALUE,1,1) <> "'")
.   GENSTR1 = GENSTR1 + '"' + trimlr(CASEVALUE) + '"'
. else
.   GENSTR1 = GENSTR1 + CASEVALUE
. endif
.   GENSTR1 = GENSTR1 + ') '
. GENSTR1 = GENSTR1 + " labels"
<comment> write 'TableViewSpreadsheet: ' GENSTR1
. execute dbms  GENSTR1
|>
next message
endif

ifthen (m_id eq ID_00019 )
|< ID_00019
. m_page = VIEWOLDKEYS
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure OLDKEYVISIBLE
|>
next message
endif

ifthen (m_id eq DELETECASEBACK )
|< DELETECASEBACK
. m_page = VIEWOLDKEYS
. execute subprocedure PAGE
. execute subprocedure ITEMVISIBLE
. execute subprocedure OLDKEYVISIBLE
|>
next message
endif

ifthen (m_id eq ID_00020 )
|< ID_00020
execute dbms 'call DBA.LOCKDB'
|>
next message
endif

ifthen (m_id eq ID_00021 )
|< ID_00021
execute dbms 'call DBA.UNLOCKDB'
|>
next message
endif

if (m_id eq 0) exit message

end message

message RMOUSE m_id, m_arg1, m_arg2
|{ RMouse

ifthen (m_id eq FORMLIST )
|< FORMLIST
. GENSTR1 = ''
. if ( exists(recnum(gettxt(RECNAMESELECTED))) eq 1 ) GENSTR1 = format(recnum(gettxt(RECNAMESELECTED)))
. GENSTR1 = 'Selected: ' + gettxt(FORMLIST) + '  (Table: ' + gettxt(RECNAMESELECTED) +', #' + GENSTR1 +')'
. display infobox GENSTR1
|>
next message
endif


|}
end message
message TIMER
|{ Timer
. execute subprocedure TIMECHECK
C  CHECK FOR USER MESSAGE NEEDS TO BE ADDED HERE.
. execute subprocedure SYSTEMERRORCHECK
|}
end message

end dialog
|{ Exit
. if (sglobal('DEBUGSEND') EQ '.') EDIT BUFFER 'DEBUGINFO'
|}
|{ Pages
subprocedure page
.  hide item IAGREE
.  hide item IDISAGREE
.  hide item DBTITLE
.  hide item DBFOOTER
.  hide item CASESEARCH
.  hide item CASELIST
.  hide item CASENEW
.  hide item CASETEXT
.  hide item CASESEARCHLABEL
.  hide item CASELISTLABEL
.  hide item CASENEWLABEL
.  hide item CASESEARCHBOX
.  hide item CASENEWBOX
.  hide item CASELISTBOX
.  hide item CASEBREADCRUMB
.  hide item TIMELABEL
.  hide item GUIVERSION
.  hide item DBAPAGE
.  hide item CASENEWB
.  hide item FORMLIST
.  hide item FORMINFO
.  hide item RECBREADCRUMB
.  hide item OPTIONS
.  hide item PAGETABLE
.  hide item PAGEHOME
.  hide item PAGENEWKEYS
.  hide item PAGEDBA
.  hide item LOGOUT
.  hide item OLDKEYLABEL1
.  hide item OLDKEYLIST1
.  hide item OLDKEYLABEL2
.  hide item OLDKEYLIST2
.  hide item OLDKEYLABEL3
.  hide item OLDKEYLIST3
.  hide item OLDKEYLABEL4
.  hide item OLDKEYLIST4
.  hide item NEWKEYLABEL1
.  hide item NEWKEYCHOICE1
.  hide item NEWKEYLABEL2
.  hide item NEWKEYCHOICE2
.  hide item NEWKEYLABEL3
.  hide item NEWKEYCHOICE3
.  hide item NEWKEYLABEL4
.  hide item NEWKEYCHOICE4
.  hide item NEWKEYVARMAP1
.  hide item NEWKEYVARMAP2
.  hide item NEWKEYVARMAP3
.  hide item NEWKEYVARMAP4
.  hide item NEWKEYVALUE1
.  hide item NEWKEYVALUE2
.  hide item NEWKEYVALUE3
.  hide item NEWKEYVALUE4
.  hide item USERNAME
.  hide item DBANAME
.  hide item RECSELECTLABEL
.  hide item DEFAULTBUTTON
.  hide item RECNAMESELECTED
.  hide item CASEBREADCRUMBOX
.  hide item CASESEARCHB
.  hide item NEWRECHELP
.  hide item ID_00009
.  hide item NEWRECBUTTON
.  hide item NEWRECCANCEL
.  hide item PAGECASEDELETE
.  hide item DEBUGCODE
.  hide item SPLASHBOTTOM
.  hide item ID_00011
.  hide item ID_00013
.  hide item RECBREADCRUMBOX
.  hide item SPLASHTOP
.  hide item RECTABLEDATA
.  hide item TABLEKEYLABEL1
.  hide item TABLEKEYLABEL2
.  hide item TABLEKEYLABEL3
.  hide item TABLEKEYLABEL4
.  hide item DELETECASELABEL
.  hide item CASEDELETEINFO
.  hide item CASEDELETEREASON
.  hide item CASEDELETEBUTTON
.  hide item ID_00017
.  hide item CASEDELETEWARNING
.  hide item CASERECWARNING
.  hide item OLDRECCOUNTERLABLE
.  hide item OLDRECCOUNTER
.  hide item TABLEVIEWSPREADSHEET
.  hide item ID_00019
.  hide item DELETECASEBACK
.  hide item ID_00020
.  hide item ID_00021
.  hide item TABLEVIEWHELP
.  hide item LOCKSTATUSLABEL
.  hide item ID_00022
.  ifthen (m_page EQ 1  )
.    show item IAGREE
.    show item IDISAGREE
.    show item GUIVERSION
.    show item USERNAME
.    show item DBANAME
.    show item SPLASHBOTTOM
.    show item ID_00011
.    show item SPLASHTOP
.  endif
.  ifthen (m_page EQ 2  )
.    show item DBTITLE
.    show item DBFOOTER
.    show item CASESEARCH
.    show item CASELIST
.    show item CASENEW
.    show item CASESEARCHLABEL
.    show item CASELISTLABEL
.    show item CASENEWLABEL
.    show item CASESEARCHBOX
.    show item CASENEWBOX
.    show item CASELISTBOX
.    show item CASENEWB
.    show item OPTIONS
.    show item PAGEHOME
.    show item PAGEDBA
.    show item LOGOUT
.    show item CASESEARCHB
.  endif
.  ifthen (m_page EQ 3  )
.    show item CASETEXT
.    show item CASEBREADCRUMB
.    show item FORMLIST
.    show item FORMINFO
.    show item RECBREADCRUMB
.    show item PAGETABLE
.    show item PAGENEWKEYS
.    show item OLDKEYLABEL1
.    show item OLDKEYLIST1
.    show item OLDKEYLABEL2
.    show item OLDKEYLIST2
.    show item OLDKEYLABEL3
.    show item OLDKEYLIST3
.    show item OLDKEYLABEL4
.    show item OLDKEYLIST4
.    show item CASEBREADCRUMBOX
.    show item PAGECASEDELETE
.    show item ID_00013
.    show item RECBREADCRUMBOX
.    show item ID_00022
.  endif
.  ifthen (m_page EQ 4  )
.    show item NEWKEYLABEL1
.    show item NEWKEYCHOICE1
.    show item NEWKEYLABEL2
.    show item NEWKEYCHOICE2
.    show item NEWKEYLABEL3
.    show item NEWKEYCHOICE3
.    show item NEWKEYLABEL4
.    show item NEWKEYCHOICE4
.    show item NEWKEYVARMAP1
.    show item NEWKEYVARMAP2
.    show item NEWKEYVARMAP3
.    show item NEWKEYVARMAP4
.    show item NEWKEYVALUE1
.    show item NEWKEYVALUE2
.    show item NEWKEYVALUE3
.    show item NEWKEYVALUE4
.    show item NEWRECHELP
.    show item ID_00009
.    show item NEWRECBUTTON
.    show item NEWRECCANCEL
.  endif
.  ifthen (m_page EQ 5  )
.    show item TIMELABEL
.    show item RECTABLEDATA
.    show item TABLEKEYLABEL1
.    show item TABLEKEYLABEL2
.    show item TABLEKEYLABEL3
.    show item TABLEKEYLABEL4
.    show item TABLEVIEWSPREADSHEET
.    show item ID_00019
.    show item TABLEVIEWHELP
.  endif
.  ifthen (m_page EQ 6  )
.    show item DELETECASELABEL
.    show item CASEDELETEINFO
.    show item CASEDELETEREASON
.    show item CASEDELETEBUTTON
.    show item ID_00017
.    show item CASEDELETEWARNING
.    show item CASERECWARNING
.    show item DELETECASEBACK
.  endif
.  ifthen (m_page EQ 7  )
.    show item DBAPAGE
.    show item RECSELECTLABEL
.    show item DEFAULTBUTTON
.    show item RECNAMESELECTED
.    show item DEBUGCODE
.    show item OLDRECCOUNTERLABLE
.    show item OLDRECCOUNTER
.    show item ID_00020
.    show item ID_00021
.    show item LOCKSTATUSLABEL
.  endif
end subprocedure
|}

|{ Footer
call GUI_MAIN.BUFFERSUBS
call GUI_MAIN.TIMECHECK
call GUI_MAIN.SYSTEMERRORCHECK
call GUI_MAIN.DEBUGINFO
call GUI_MAIN.ANYKEYCLEAN
call GUI_MAIN.ANYKEYVALIDATE
call GUI_MAIN.ALLKEYGETVALUE
call GUI_MAIN.ALLKEYINIDISPLAY
call GUI_MAIN.CASEVALIDATE
call GUI_MAIN.CASENEW
call GUI_MAIN.CASELISTLOAD
call GUI_MAIN.CASELISTSEARCH
call GUI_MAIN.OLDCASESEARCHLIB
call GUI_MAIN.CASENEWLIB
CALL GUI_MAIN.CASEALLDATADISPLAY
CALL GUI_MAIN.CASEDELETE
call GUI_MAIN.RECLISTLOAD
call GUI_MAIN.RECGETINFO
call GUI_MAIN.OLDKEYPAGEDISPLAYLIB
call GUI_MAIN.OLDKEYVISIBLE
call GUI_MAIN.OLDKEYMAKEVIA
call GUI_MAIN.OLDKEYREDLABEL
call GUI_MAIN.OLDKEYDESELECTNEXT
call GUI_MAIN.OLDKEYREFRESH
call GUI_MAIN.OLDRECCOUNT
call GUI_MAIN.NEWKEYVISIBLE
call GUI_MAIN.ITEMVISIBLE
CALL GUI_MAIN.ITEMENABLE
call GUI_MAIN.GOTOSCREEN
CALL GUI_MAIN.GOTOSCREENLIB
call GUI_MAIN.OLDKEYALLVALIDATE
CALL GUI_MAIN.RECTABLEDISPLAY
CALL GUI_MAIN.PERMISSIONSDEFAULT
CALL DBA.DBLOCKSTATUS
|
|
subprocedure RECDISPLAY
<comment> write 'Sub: RecDisplay'
. select item RECNAMESELECTED, getpos(FORMLIST)
. set item RECBREADCRUMB, gettxt (FORMLIST)
. set item NEWRECHELP, ' New ' + gettxt (FORMLIST)
end subprocedure
|
|
subprocedure OLDKEYCLICKLIB
. execute subprocedure ALLKEYGETVALUE
. DO REPEAT REPX = 1 TO 4
.   ifthen ( (KEYCOUNT EQ REPX) AND (getfocus(0) eq OLDKEYLIST!REPX) )
.     execute subprocedure OLDKEYREDLABEL
.     ifthen (M_ARG2 eq 1)
.       execute subprocedure GOTOSCREENLIB  | double clicked last key - go to screen
.       EXIT SUBPROCEDURE
.     endif
.   endif
. END REPEAT
. execute subprocedure OLDKEYMAKEVIA
. execute subprocedure OLDKEYREFRESH
. execute subprocedure OLDKEYDESELECTNEXT
. execute subprocedure OLDKEYREDLABEL
end subprocedure
|
|
END RETRIEVAL |program
|}
